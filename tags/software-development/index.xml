<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Development on Dominik Rys</title>
    <link>https://dominikrys.com/tags/software-development/</link>
    <description>Recent content in Software Development on Dominik Rys</description>
    <image>
      <title>Dominik Rys</title>
      <url>https://dominikrys.com/android-chrome-512x512.png</url>
      <link>https://dominikrys.com/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Jan 2022 20:39:17 +0000</lastBuildDate>
    <atom:link href="https://dominikrys.com/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Live Reload Browserify &#43; TypeScript in Node.js</title>
      <link>https://dominikrys.com/posts/live-reload-browserify-ts/</link>
      <pubDate>Mon, 17 Jan 2022 20:39:17 +0000</pubDate>
      <guid>https://dominikrys.com/posts/live-reload-browserify-ts/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently been working on a Node.js project in TypeScript and bundling its dependencies using &lt;a href=&#34;https://browserify.org/&#34;&gt;Browserify&lt;/a&gt;. To increase the speed of iteration, I wanted to automatically reload the tab with my web app whenever I made code changes, which would entail recompiling the TypeScript code into JavaScript. However, I couldn&amp;rsquo;t find a good guide on how to achieve this online. In the end, I managed to figure it out by bolting some tools together - with no JavaScript task runner such as &lt;a href=&#34;https://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; or &lt;a href=&#34;https://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt; needed!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating Alerts from Logs in Kibana</title>
      <link>https://dominikrys.com/posts/kibana-log-alerts/</link>
      <pubDate>Sat, 18 Dec 2021 12:35:54 +0000</pubDate>
      <guid>https://dominikrys.com/posts/kibana-log-alerts/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently deployed the Elastic Stack and set up sending logs to it. To automate certain checks, I then wanted to set up some alerts based on the logs. However, I found that there is several ways that this can be set up in Kibana. Each way has its shortcomings and pre-requisites, which aren&amp;rsquo;t particularly well documented in Elastic&amp;rsquo;s documentation. I&amp;rsquo;ll explain my findings in this post.&lt;/p&gt;
&lt;h2 id=&#34;types-of-kibana-alerts&#34;&gt;Types of Kibana Alerts&lt;/h2&gt;
&lt;h3 id=&#34;rules&#34;&gt;Rules&lt;/h3&gt;
&lt;p&gt;These used to be called Kibana Alerts (for some reason Elastic has done a lot of renaming over the years), and in most cases I found these to be the best choice. These can be found by navigating to &lt;strong&gt;Stack Management&lt;/strong&gt; &amp;gt; &lt;strong&gt;Rules and Connectors&lt;/strong&gt; in Kibana.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Injecting Build-Time Variables to Nested Golang Packages</title>
      <link>https://dominikrys.com/posts/injecting-build-variables-nested-go/</link>
      <pubDate>Sun, 07 Nov 2021 18:32:38 +0000</pubDate>
      <guid>https://dominikrys.com/posts/injecting-build-variables-nested-go/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently tried to figure out how to inject variables to a Go executable at build-time. The available guidance online was straightforward, but it all referred to simple Go programs with rudimentary package structures that aren&amp;rsquo;t hosted remotely. None also mentioned working with the &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt; CLI library, which usually results in multiple levels of nesting in the Go application&amp;rsquo;s package structure.&lt;/p&gt;
&lt;p&gt;To address what the other posts don&amp;rsquo;t cover, I thought I&amp;rsquo;d write this short blog post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enforcing Uniqueness of Multiple Attributes in DynamoDB</title>
      <link>https://dominikrys.com/posts/unqiue-attributes-dynamodb/</link>
      <pubDate>Sun, 31 Oct 2021 09:53:52 +0000</pubDate>
      <guid>https://dominikrys.com/posts/unqiue-attributes-dynamodb/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently tried to solve a problem that involved enforcing uniqueness of multiple attributes in DynamoDB. Surprisingly, this wasn&amp;rsquo;t a trivial undertaking. Given most of my database experience is using SQL databases, I initially started solving the problem using SQL paradigms that didn&amp;rsquo;t translate well to NoSQL.&lt;/p&gt;
&lt;p&gt;In this post, I will describe what I learned, and how it&amp;rsquo;s possible to implement enforcing uniqueness of multiple attributes in DynamoDB.&lt;/p&gt;
&lt;h2 id=&#34;approaches-that-dont-work&#34;&gt;Approaches That Don&amp;rsquo;t Work&lt;/h2&gt;
&lt;h3 id=&#34;using-condition-expressions&#34;&gt;Using Condition Expressions&lt;/h3&gt;
&lt;p&gt;After some initial research, I tried implementing a Conditional Put using a &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html#Expressions.ConditionExpressions.PreventingOverwrites&#34;&gt;condition expression&lt;/a&gt;. This seemed logical - add a condition expression with chained &lt;code&gt;attribute_not_exists(attribute_name)&lt;/code&gt; statements and suddenly the database will start enforcing uniqueness of whichever combination of attributes I&amp;rsquo;d like.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resources for Learning about Operating Systems</title>
      <link>https://dominikrys.com/posts/learning-operating-systems/</link>
      <pubDate>Tue, 03 Aug 2021 16:07:52 +0100</pubDate>
      <guid>https://dominikrys.com/posts/learning-operating-systems/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently graduated with a Computer Science degree. Overall, the course covered most of the fundamentals of computer science. However, the course structure changed when I was on my year in industry, causing me to completely miss out on operating systems modules! Since I&amp;rsquo;ve always been interested in operating systems, I decided to teach myself about them.&lt;/p&gt;
&lt;p&gt;In this short post, I will cover what online resources I found to be particularly useful in teaching myself about operating systems. Iâ€™ll mention resources ranging from ones that can be gone through in a couple of hours to acquire some surface-level knowledge, to those that will take a bit longer but prepare you to write the next Unix successor.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How I Started Learning Rust</title>
      <link>https://dominikrys.com/posts/learning-rust/</link>
      <pubDate>Wed, 16 Jun 2021 18:56:21 +0100</pubDate>
      <guid>https://dominikrys.com/posts/learning-rust/</guid>
      <description>&lt;p&gt;I wanted to learn Rust for a while. The promises of memory-safety and performance have piqued my interest and I needed to see what all the hype was about. In turn, I spent some time learning Rust on and off over the last couple of months alongside university work.&lt;/p&gt;
&lt;p&gt;In this post, I describe how I went about learning Rust and what resources I used. I also reflect on what methods worked well and what could have possibly been skipped. I hope this will be useful to anyone that&amp;rsquo;s also curious about Rust.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Debug srsLTE</title>
      <link>https://dominikrys.com/posts/debug-srslte/</link>
      <pubDate>Sat, 13 Feb 2021 10:34:48 +0100</pubDate>
      <guid>https://dominikrys.com/posts/debug-srslte/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently been working extensively with &lt;a href=&#34;https://github.com/srsLTE/srsLTE&#34;&gt;srsLTE&lt;/a&gt; for my bachelor&amp;rsquo;s dissertation. So far, the greatest difficulty has been debugging the software. In this short post, I will describe various ways I found that srsLTE can be debugged, and any pitfalls that come with them.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll assume you know how to debug ordinary C/C++ programs (I&amp;rsquo;ll patiently wait here if you need to have a look into that).&lt;/p&gt;
&lt;h2 id=&#34;compiling-srslte-in-debug-mode&#34;&gt;Compiling srsLTE in Debug Mode&lt;/h2&gt;
&lt;p&gt;Your first attempt at debugging may have been to compile with the &lt;code&gt;Debug&lt;/code&gt; CMake flag, and then executing the binaries using GDB or another debugger:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compiling My C&#43;&#43; CHIP-8 Emulator to WebAssembly</title>
      <link>https://dominikrys.com/posts/compiling-chip8-to-wasm/</link>
      <pubDate>Sat, 15 Aug 2020 16:55:48 +0100</pubDate>
      <guid>https://dominikrys.com/posts/compiling-chip8-to-wasm/</guid>
      <description>&lt;p&gt;A couple of months ago I wrote a &lt;a href=&#34;https://github.com/dominikrys/chip8&#34;&gt;CHIP-8 emulator&lt;/a&gt; in C++17, as I wanted to learn about emulation and expand my C++ knowledge outside of work. In this post I&amp;rsquo;ll explain how I went about compiling the emulator which was designed to run natively, to also run on the web using the magic of WebAssembly. You can try out the result &lt;strong&gt;&lt;a href=&#34;https://dominikrys.com/chip8&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;My main motivation for getting the emulator working on the web was that in its current state, it took some effort to get it up and running. I could send someone the pre-compiled binary or give building instructions, but those aren&amp;rsquo;t guaranteed to work on every platform. Ideally, I wanted a solution that can be hosted on the web, and I recently heard about this cool new &amp;ldquo;WebAssembly&amp;rdquo; which seemed perfect for the job.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
