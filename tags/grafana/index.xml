<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Grafana on Dominik Rys</title>
    <link>https://dominikrys.com/tags/grafana/</link>
    <description>Recent content in Grafana on Dominik Rys</description>
    <image>
      <title>Dominik Rys</title>
      <url>https://dominikrys.com/android-chrome-512x512.png</url>
      <link>https://dominikrys.com/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Jul 2022 10:08:23 +0100</lastBuildDate>
    <atom:link href="https://dominikrys.com/tags/grafana/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scraping Grafana Agent Metrics in Kubernetes</title>
      <link>https://dominikrys.com/posts/grafana-agent-monitoring-kubernetes/</link>
      <pubDate>Sun, 03 Jul 2022 10:08:23 +0100</pubDate>
      <guid>https://dominikrys.com/posts/grafana-agent-monitoring-kubernetes/</guid>
      <description>&lt;p&gt;After deploying the &lt;a href=&#34;https://github.com/grafana/agent&#34;&gt;Grafana Agent&lt;/a&gt; in a Kubernetes cluster, you&amp;rsquo;ll most likely want to monitor it to ensure that no observability data gets lost. Grafana provides a &lt;a href=&#34;https://grafana.com/docs/grafana-cloud/agent/agent_monitoring/&#34;&gt;comprehensive guide&lt;/a&gt; on how to configure alerts for the agent, but I found it to not work for all cases. Namely, enabling agent integration didn&amp;rsquo;t enable scraping metrics of the agent itself. This could be due to running the Grafana Agent in Kubernetes, which the guide may not be targeted at, or due to configuring the agent in a manner that deviates from Grafana&amp;rsquo;s recommended way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatically Generating a Grafana Agent Configuration for a Kubernetes Cluster</title>
      <link>https://dominikrys.com/posts/grafana-agent-config-kubernetes/</link>
      <pubDate>Wed, 30 Mar 2022 21:37:36 +0100</pubDate>
      <guid>https://dominikrys.com/posts/grafana-agent-config-kubernetes/</guid>
      <description>&lt;p&gt;Configuring the &lt;a href=&#34;https://github.com/grafana/agent/&#34;&gt;Grafana Agent&lt;/a&gt; to collect metrics from nodes in a Kubernetes cluster can be quite a daunting task. Manually configuring scrape jobs for all the pods running in your cluster can be a laborious undertaking that is not maintainable in the long run, especially as new services are added. In this post, I describe a way to generate a Grafana Agent configuration for a Kubernetes cluster using the Grafana Agent Operator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a TLS-Secured Monitoring Solution in Docker using InfluxDB, Grafana, and Traefik</title>
      <link>https://dominikrys.com/posts/monitoring-influxdb-grafana-traefik/</link>
      <pubDate>Tue, 01 Dec 2020 12:51:48 +0100</pubDate>
      <guid>https://dominikrys.com/posts/monitoring-influxdb-grafana-traefik/</guid>
      <description>&lt;p&gt;During my last internship, I&amp;rsquo;ve been tasked with designing and deploying infrastructure for monitoring a cluster of machines that were used for performance testing. I wrote a blog post detailing high-level choices about it which you can check out &lt;a href=&#34;https://dominikrys.com/posts/monitoring-corda-nodes/&#34; title=&#34;Monitoring Corda Nodes&#34;&gt;here&lt;/a&gt;. The post also includes justifications for why I chose to deploy everything in Docker, and why I chose to work with &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; and &lt;a href=&#34;https://www.influxdata.com/products/influxdb/&#34;&gt;InfluxDB&lt;/a&gt; as the front-end and time-series database, respectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring Corda Nodes Using Grafana, InfluxDB, and Telegraf</title>
      <link>https://dominikrys.com/posts/monitoring-corda-nodes/</link>
      <pubDate>Mon, 21 Sep 2020 16:52:48 +0100</pubDate>
      <guid>https://dominikrys.com/posts/monitoring-corda-nodes/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This post is also hosted on the &lt;a href=&#34;https://www.corda.net/blog/monitoring-corda-nodes-using-grafana-influxdb-and-telegraf/&#34;&gt;Corda Blog&lt;/a&gt;.&lt;/strong&gt; The main goal behind this post was to provide an easily accessible high-level overview on monitoring Corda nodes. It also showcases part of what I&amp;rsquo;ve done during my summer internship at R3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Here at R3, we have a cluster of Corda nodes that we use for performance testing. We have developed a &lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/performance-testing/toc-tree.html&#34;&gt;performance testing suite&lt;/a&gt; that enables us to establish baseline numbers, quantify improvements from new features, and identify regressions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
