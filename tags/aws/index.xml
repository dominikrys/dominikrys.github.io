<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AWS on Dominik Rys</title>
    <link>https://dominikrys.com/tags/aws/</link>
    <description>Recent content in AWS on Dominik Rys</description>
    <image>
      <title>Dominik Rys</title>
      <url>https://dominikrys.com/android-chrome-512x512.png</url>
      <link>https://dominikrys.com/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 31 Oct 2021 09:53:52 +0000</lastBuildDate>
    <atom:link href="https://dominikrys.com/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enforcing Uniqueness of Multiple Attributes in DynamoDB</title>
      <link>https://dominikrys.com/posts/unqiue-attributes-dynamodb/</link>
      <pubDate>Sun, 31 Oct 2021 09:53:52 +0000</pubDate>
      <guid>https://dominikrys.com/posts/unqiue-attributes-dynamodb/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently tried to solve a problem that involved enforcing uniqueness of multiple attributes in DynamoDB. Surprisingly, this wasn&amp;rsquo;t a trivial undertaking. Given most of my database experience is using SQL databases, I initially started solving the problem using SQL paradigms that didn&amp;rsquo;t translate well to NoSQL.&lt;/p&gt;
&lt;p&gt;In this post, I will describe what I learned, and how it&amp;rsquo;s possible to implement enforcing uniqueness of multiple attributes in DynamoDB.&lt;/p&gt;
&lt;h2 id=&#34;approaches-that-dont-work&#34;&gt;Approaches That Don&amp;rsquo;t Work&lt;/h2&gt;
&lt;h3 id=&#34;using-condition-expressions&#34;&gt;Using Condition Expressions&lt;/h3&gt;
&lt;p&gt;After some initial research, I tried implementing a Conditional Put using a &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html#Expressions.ConditionExpressions.PreventingOverwrites&#34;&gt;condition expression&lt;/a&gt;. This seemed logical - add a condition expression with chained &lt;code&gt;attribute_not_exists(attribute_name)&lt;/code&gt; statements and suddenly the database will start enforcing uniqueness of whichever combination of attributes I&amp;rsquo;d like.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
