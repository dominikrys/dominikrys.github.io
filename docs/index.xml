<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominik Rys</title>
    <link>https://dominikrys.com/</link>
    <description>Recent content on Dominik Rys</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 22 Jul 2021 11:02:23 +0100</lastBuildDate><atom:link href="https://dominikrys.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10 Tips for Getting a First in a Computer Science Dissertation</title>
      <link>https://dominikrys.com/posts/2021/07/10-tips-for-getting-a-first-in-a-computer-science-dissertation/</link>
      <pubDate>Thu, 22 Jul 2021 11:02:23 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/07/10-tips-for-getting-a-first-in-a-computer-science-dissertation/</guid>
      <description>Introduction The moment I&amp;rsquo;ve been waiting for for years has happened recently - I&amp;rsquo;ve graduated with a First Class degree in Computer Science from the University of Birmingham! During the graduation ceremony (which I&amp;rsquo;ve been very lucky to get given a pandemic going on) I have also been awarded the Undergraduate Distinguished Dissertation Prize. This has been quite an honour as it came completely unexpected, and it made a lot of the effort that went into writing my dissertation worthwhile.</description>
    </item>
    
    <item>
      <title>Executing Stream Cipher Attacks on IP Packets</title>
      <link>https://dominikrys.com/posts/2021/07/executing-stream-cipher-attacks-on-ip-packets/</link>
      <pubDate>Fri, 09 Jul 2021 15:36:55 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/07/executing-stream-cipher-attacks-on-ip-packets/</guid>
      <description>Introduction For part of my bachelor&amp;rsquo;s dissertation, I implemented and executed a bit-flipping attack on encrypted IP packets in LTE networks. The attack was first documented by David Rupprecht et al. in their academic paper &amp;ldquo;Breaking LTE on Layer Two&amp;rdquo;.
The attack is possible due to a specification flaw in LTE standards, where IP packets are not integrity protected. Therefore, a man-in-the-middle (MITM) attacker can modify the packets and the receiver will decrypt them successfully since it can&amp;rsquo;t verify the authenticity of the data.</description>
    </item>
    
    <item>
      <title>How I Started Learning Rust</title>
      <link>https://dominikrys.com/posts/2021/06/how-i-started-learning-rust/</link>
      <pubDate>Wed, 16 Jun 2021 18:56:21 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/06/how-i-started-learning-rust/</guid>
      <description>I wanted to learn Rust for a while. The promises of memory-safety and performance have piqued my interest and I needed to see what all the hype was about. In turn, I spent some time learning Rust on and off over the last couple of months alongside university work.
In this post, I describe how I went about learning Rust and what resources I used. I also reflect on what methods worked well and what could have possibly been skipped.</description>
    </item>
    
    <item>
      <title>How to Disable UDP Checksum Validation in Linux</title>
      <link>https://dominikrys.com/posts/2021/05/how-to-disable-udp-checksum-validation-in-linux/</link>
      <pubDate>Thu, 20 May 2021 12:37:22 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/05/how-to-disable-udp-checksum-validation-in-linux/</guid>
      <description>I recently needed to disable the validation of UDP checksums of incoming packets on a Linux machine for a security project. To my surprise, there weren&amp;rsquo;t any satisfactory solutions that I could easily find online related to this. The top results also suggested disabling checksum offloading, which doesn&amp;rsquo;t disable checksum checking. In the end, I managed to figure this problem out and found that it&amp;rsquo;s possible without recompiling the kernel. In this short post, I&amp;rsquo;ll describe how to set up a Linux machine to ignore UDP checksums in received packets.</description>
    </item>
    
    <item>
      <title>How to Transparently Proxy IP Packets With Spoofed Destinations</title>
      <link>https://dominikrys.com/posts/2021/04/how-to-transparently-proxy-ip-packets-with-spoofed-destinations/</link>
      <pubDate>Sat, 17 Apr 2021 10:44:53 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/04/how-to-transparently-proxy-ip-packets-with-spoofed-destinations/</guid>
      <description>Introduction I&amp;rsquo;ve recently worked on a security project which required me to transparently/interceptingly (if that&amp;rsquo;s a word) proxy IP packets that have had their destination IPs spoofed. By this, I mean that the destination IP in an IP packet is not the IP of the destination which a DNS request would correctly resolve. For example, this could be due to a DNS query being spoofed and sending an IP address of another destination in reply.</description>
    </item>
    
    <item>
      <title>A Modern Way to Configure Squid as a Transparent Proxy</title>
      <link>https://dominikrys.com/posts/2021/04/a-modern-way-to-configure-squid-as-a-transparent-proxy/</link>
      <pubDate>Sat, 10 Apr 2021 10:08:45 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/04/a-modern-way-to-configure-squid-as-a-transparent-proxy/</guid>
      <description>Introduction I&amp;rsquo;ve recently set up Squid as a transparent proxy for a security project. What should have been relatively straightforward had me browsing through tutorials from over 10 years ago that don&amp;rsquo;t quite work any more. After comparing this prehistoric knowledge with some supposedly up-to-date documentation, I managed to understand enough about Squid to get a minimal transparent proxy configuration on a modern version of Linux hosted in the cloud.</description>
    </item>
    
    <item>
      <title>How to Debug srsLTE</title>
      <link>https://dominikrys.com/posts/2021/02/how-to-debug-srslte/</link>
      <pubDate>Sat, 13 Feb 2021 10:34:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2021/02/how-to-debug-srslte/</guid>
      <description>Introduction I&amp;rsquo;ve recently been working extensively with srsLTE for my bachelor&amp;rsquo;s dissertation. So far, the greatest difficulty has been debugging the software. In this short post, I will describe various ways I found that srsLTE can be debugged, and any pitfalls that come with them.
I&amp;rsquo;ll assume you know how to debug ordinary C/C++ programs (I&amp;rsquo;ll patiently wait here if you need to have a look into that).
Compiling srsLTE in debug mode Your first attempt at debugging may have been to compile with the Debug CMake flag, and then executing the binaries using GDB or another debugger:</description>
    </item>
    
    <item>
      <title>Setting up a TLS-Secured Monitoring Solution in Docker using InfluxDB, Grafana and Traefik</title>
      <link>https://dominikrys.com/posts/2020/12/setting-up-a-tls-secured-monitoring-solution-in-docker-using-influxdb-grafana-and-traefik/</link>
      <pubDate>Tue, 01 Dec 2020 12:51:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2020/12/setting-up-a-tls-secured-monitoring-solution-in-docker-using-influxdb-grafana-and-traefik/</guid>
      <description>Motivation During my last internship, I&amp;rsquo;ve been tasked with designing and deploying infrastructure for monitoring a cluster of machines that were used for performance testing. I wrote a blog post detailing high-level choices about it which you can check out here. The post also includes justifications for why I chose to deploy everything in Docker, and why I chose to work with Grafana and InfluxDB as the front-end and time-series database, respectively.</description>
    </item>
    
    <item>
      <title>Monitoring Corda Nodes Using Grafana, InfluxDB, and Telegraf</title>
      <link>https://dominikrys.com/posts/2020/09/monitoring-corda-nodes-using-grafana-influxdb-and-telegraf/</link>
      <pubDate>Mon, 21 Sep 2020 16:52:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2020/09/monitoring-corda-nodes-using-grafana-influxdb-and-telegraf/</guid>
      <description>This post is also hosted on the Corda Blog. The main goal behind this post was to provide an easily accessible high-level overview on monitoring Corda nodes. It also showcases part of what I&amp;rsquo;ve done during my summer internship at R3.
 Intro Here at R3, we have a cluster of Corda nodes that we use for performance testing. We have developed a performance testing suite that enables us to establish baseline numbers, quantify improvements from new features, and identify regressions.</description>
    </item>
    
    <item>
      <title>Compiling a C&#43;&#43; CHIP-8 Emulator to WebAssembly</title>
      <link>https://dominikrys.com/posts/2020/08/compiling-a-c-chip-8-emulator-to-webassembly/</link>
      <pubDate>Sat, 15 Aug 2020 16:55:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2020/08/compiling-a-c-chip-8-emulator-to-webassembly/</guid>
      <description>Introduction A couple of months ago I wrote a CHIP-8 emulator in C++17, as I wanted to learn about emulation and expand my C++ knowledge outside of work. In this post I&amp;rsquo;ll explain how I went about compiling the emulator which was designed to run natively, to also run on the web using the magic of WebAssembly. You can try out the result here.
My main motivation for getting the emulator working on the web was that in its current state, it took some effort to get it up and running.</description>
    </item>
    
  </channel>
</rss>
