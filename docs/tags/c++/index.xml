<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>c&#43;&#43; on Dominik Rys</title>
    <link>https://dominikrys.com/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on Dominik Rys</description>
    <image>
      <url>https://dominikrys.com/android-chrome-512x512.png</url>
      <link>https://dominikrys.com/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jul 2021 15:36:55 +0100</lastBuildDate><atom:link href="https://dominikrys.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Executing Stream Cipher Attacks on IP Packets</title>
      <link>https://dominikrys.com/posts/stream-cipher-attacks-on-ip/</link>
      <pubDate>Fri, 09 Jul 2021 15:36:55 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/stream-cipher-attacks-on-ip/</guid>
      <description>For part of my bachelor&amp;rsquo;s dissertation, I implemented and executed a bit-flipping attack on encrypted IP packets in LTE networks. The attack was first documented by David Rupprecht et al. in their academic paper &amp;ldquo;Breaking LTE on Layer Two&amp;rdquo;.
The attack is possible due to a specification flaw in LTE standards, where IP packets are not integrity protected. Therefore, a man-in-the-middle (MITM) attacker can modify the packets and the receiver will decrypt them successfully since it can&amp;rsquo;t verify the authenticity of the data.</description>
    </item>
    
    <item>
      <title>How to Debug srsLTE</title>
      <link>https://dominikrys.com/posts/debug-srslte/</link>
      <pubDate>Sat, 13 Feb 2021 10:34:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/debug-srslte/</guid>
      <description>I&amp;rsquo;ve recently been working extensively with srsLTE for my bachelor&amp;rsquo;s dissertation. So far, the greatest difficulty has been debugging the software. In this short post, I will describe various ways I found that srsLTE can be debugged, and any pitfalls that come with them.
I&amp;rsquo;ll assume you know how to debug ordinary C/C++ programs (I&amp;rsquo;ll patiently wait here if you need to have a look into that).
Compiling srsLTE in debug mode Your first attempt at debugging may have been to compile with the Debug CMake flag, and then executing the binaries using GDB or another debugger:</description>
    </item>
    
    <item>
      <title>Compiling My C&#43;&#43; CHIP-8 Emulator to WebAssembly</title>
      <link>https://dominikrys.com/posts/compiling-chip8-to-wasm/</link>
      <pubDate>Sat, 15 Aug 2020 16:55:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/compiling-chip8-to-wasm/</guid>
      <description>A couple of months ago I wrote a CHIP-8 emulator in C++17, as I wanted to learn about emulation and expand my C++ knowledge outside of work. In this post I&amp;rsquo;ll explain how I went about compiling the emulator which was designed to run natively, to also run on the web using the magic of WebAssembly. You can try out the result here.
My main motivation for getting the emulator working on the web was that in its current state, it took some effort to get it up and running.</description>
    </item>
    
  </channel>
</rss>
