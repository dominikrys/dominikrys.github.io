<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software engineering on Dominik Rys</title>
    <link>https://dominikrys.com/tags/software-engineering/</link>
    <description>Recent content in software engineering on Dominik Rys</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 13 Feb 2021 10:34:48 +0100</lastBuildDate><atom:link href="https://dominikrys.com/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Debug srsLTE</title>
      <link>https://dominikrys.com/blog/how-to-debug-srslte/</link>
      <pubDate>Sat, 13 Feb 2021 10:34:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/blog/how-to-debug-srslte/</guid>
      <description>I&amp;rsquo;ve recently been working extensively with srsLTE for my university dissertation. So far, the greatest difficulty has been debugging the software. In this short post, I will describe various ways I found that srsLTE can be debugged, and any pitfalls that come with them.
I&amp;rsquo;ll assume you know how to debug ordinary C/C++ programs (I&amp;rsquo;ll patiently wait here if you need to have a look into that).
Compiling srsLTE in debug mode Your first attempt at debugging may have been to compile with the Debug CMake flag, and then executing the binaries using GDB or another debugger:</description>
    </item>
    
    <item>
      <title>Compiling a C&#43;&#43; CHIP-8 Emulator to WebAssembly</title>
      <link>https://dominikrys.com/blog/compiling-chip8-to-wasm/</link>
      <pubDate>Sat, 15 Aug 2020 16:55:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/blog/compiling-chip8-to-wasm/</guid>
      <description>Intro A couple of months ago I wrote a CHIP-8 emulator in C++17, as I wanted to learn about emulation and expand my C++ knowledge outside of work. In this post I&amp;rsquo;ll explain how I went about compiling the emulator which was designed to run natively, to also run on the web using the magic of WebAssembly. You can try out the result here.
My main motivation for getting the emulator working on the web was that in its current state, it took some effort to get it up and running.</description>
    </item>
    
  </channel>
</rss>
